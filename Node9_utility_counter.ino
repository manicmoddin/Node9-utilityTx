//#include <Arduino.h>
//#define NOT_AN_INTERRUPT -1
#include <JeeLib.h>
/*
+-----------------------------------------------------------------------------+
 |                                                                             |
 | Utility Counter:                                                            |
 | A simple application that uses the two interrupts on the arduino to count   |
 | the ppulses generated by the utility meters.                                |
 | In this instance the Gas meter is "Analouge" in the sence that it has a     |
 | rotating, magnetic disc that turns for every 1/1000 of a unit.              |
 | The Electricity meter is digital, and flashes once every 1/1000 of a kWh    |
 |                                                                             |
 | Author: Jimmy Kemp                                        Date : 08/12/2015 |
 | Licence : Released into public Domain                                       |
 |                                                                             |
 +-----------------------------------------------------------------------------+
 */

//define initial variables

int gas_num = 11231;          // The actual reading that the gas company want
int gas_hund = 66;         // The thousandths of a unit

int elect_num = 0;        // The actual reading the elctricity company want
int elect_thou = 0;        // The thousandths of a unit

int gasPin = 3;
int gasState = 1;
int oldGasState =1;

typedef struct {
  int gasReading, gasReadingHund, electricReading, electricReadingThou;
} 
PayloadU;
PayloadU utility;

long previousMillis = 0;        // will store last time LED was updated
long interval = 10000;          // interval at which to blink (milliseconds)

void setup() {
  rf12_initialize(9, RF12_433MHZ, 210);
  Serial.begin(9600);
  Serial.println("Gas Meter Reading \t\tElectric Meter Reading");
  Serial.println();
  pinMode(gasPin, INPUT);
  //turn on pull up resistor
  digitalWrite(gasPin,HIGH);
  //attachInterrupt(digitalPinToInterrupt(gasPin), incrementGas(), FALLING);
  attachInterrupt(1, incrementGas, FALLING);
  //attachInterrupt(1, send_rf_data, RISING);
}

void loop() {
  //  Serial.print(gas_num);
  //  Serial.print(".");
  //  Serial.print(gas_thou);
  //  Serial.print("\t");
  //  Serial.print(gasState);
  //  Serial.print("\t\t\t");
  //  
  //  Serial.print(elect_num);
  //  Serial.print(".");
  //  Serial.print(elect_thou);
  //  Serial.println();
  gasState = digitalRead(gasPin);
  
  /*Need a better way than polling Interrupts? */
  if(gasState != oldGasState) {
    oldGasState = gasState;
    if(gasState == 0) {
      incrementGas();
    }
  }
  //Serial.println(gasState);
  if (rf12_recvDone())
  {
    if (rf12_crc == 0 && (rf12_hdr & RF12_HDR_CTL) == 0)  // and no rf errors
    {
      int node_id = (rf12_hdr & 0x1F);
      if (node_id == 9) {
        utility = *(PayloadU*) rf12_data;
        gas_num = utility.gasReading;
        gas_hund = utility.gasReadingHund;
        elect_num = utility.electricReading;
        elect_thou = utility.electricReadingThou;
        Serial.println("Recieved");
      }

    }
  }




  utility.gasReading = gas_num;
  utility.gasReadingHund = gas_hund;

  unsigned long currentMillis = millis();

  if(currentMillis - previousMillis > interval) {
    // save the last time you blinked the LED 
    previousMillis = currentMillis;
    send_rf_data();   
  }
}

void incrementGas() {
  if (gas_hund < 99) {
    gas_hund ++;
  }
  else {
    gas_hund = 0;
    gas_num ++;
  }
}

void incrementElect() {
  if (elect_thou < 999) {
    elect_thou ++;
  }
  else {
    elect_thou = 0;
    elect_num ++;
  }
}

void send_rf_data()
{
  //digitalWrite(activityLed, HIGH);
  rf12_sleep(RF12_WAKEUP);
  // if ready to send + exit loop if it gets stuck as it seems too
  int i = 0; 
  while (!rf12_canSend() && i<10) {
    rf12_recvDone(); 
    i++;
  }
  rf12_sendStart(0, &utility, sizeof utility);
  // set the sync mode to 2 if the fuses are still the Arduino default
  // mode 3 (full powerdown) can only be used with 258 CK startup fuses
  rf12_sendWait(2);
  rf12_sleep(RF12_SLEEP);
  //digitalWrite(activityLed, LOW);
}


